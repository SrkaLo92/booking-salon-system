generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  SALON_OWNER
  EMPLOYEE
  SUPER_ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id                   Int           @id @default(autoincrement())
  email                String        @unique @db.VarChar(255)
  passwordHash         String        @map("password_hash") @db.VarChar(255)
  name                 String        @db.VarChar(256)
  phoneNumber          String?       @db.VarChar(15)
  role                 UserRole      @default(USER)
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  deleted              Boolean       @default(false)
  active               Boolean
  clientAppointments   Appointment[] @relation(name: "UserAppointments")
  employeeAppointments Appointment[] @relation(name: "EmployeeAppointments")
  reviews              Review[]
  ownedSalons          Salon[]       @relation("SalonOwner")
  salons               Salon[]       @relation("EmployeeSalon")
  schedules            Schedule[]
  UserSalon            UserSalon[]

  @@map("user")
}

model Salon {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  description  String?        @db.VarChar(1000)
  address      String         @db.VarChar(255)
  ownerId      Int
  owner        User           @relation(fields: [ownerId], references: [id], name: "SalonOwner")
  employees    User[]         @relation("EmployeeSalon")
  appointments Appointment[]
  reviews      Review[]
  promotions   Promotion[]
  analytics    Analytics[]
  salonImages  SalonImage[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted      Boolean        @default(false)
  UserSalon    UserSalon[]
  SalonService SalonService[]

  @@map("salon")
}

model Service {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  price         Float
  duration      Int
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  appointments  Appointment[]
  promotions    Promotion[]
  serviceImages ServiceImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deleted       Boolean        @default(false)
  SalonService  SalonService[]

  @@map("service")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  services Service[]
  deleted  Boolean   @default(false)

  @@map("category")
}

model Appointment {
  id         Int               @id @default(autoincrement())
  userId     Int
  serviceId  Int
  salonId    Int
  employeeId Int?
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  status     AppointmentStatus
  notes      String?           @db.VarChar(1000)
  user       User              @relation(name: "UserAppointments", fields: [userId], references: [id])
  service    Service           @relation(fields: [serviceId], references: [id])
  salon      Salon             @relation(fields: [salonId], references: [id])
  employee   User?             @relation(name: "EmployeeAppointments", fields: [employeeId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@map("appointment")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  salonId   Int
  rating    Int // Rating scale (e.g., 1-5)
  comment   String?  @db.VarChar(1000)
  visitDate DateTime
  user      User     @relation(fields: [userId], references: [id])
  salon     Salon    @relation(fields: [salonId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Promotion {
  id          Int      @id @default(autoincrement())
  salonId     Int?
  serviceId   Int?
  description String?  @db.VarChar(1000)
  startDate   DateTime
  endDate     DateTime
  discount    Float // Discount percentage
  salon       Salon?   @relation(fields: [salonId], references: [id])
  service     Service? @relation(fields: [serviceId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("promotion")
}

model Analytics {
  id                Int      @id @default(autoincrement())
  salonId           Int
  date              DateTime
  appointmentsCount Int
  newClientsCount   Int
  popularServices   Json // JSON object for storing popular services data
  revenue           Float // Total revenue for the day
  salon             Salon    @relation(fields: [salonId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("analytics")
}

model Schedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  dayOfWeek Int // 0 = Sunday, 1 = Monday, etc.
  startTime DateTime
  endTime   DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@map("schedule")
}

model SalonImage {
  id       Int    @id @default(autoincrement())
  salonId  Int
  imageUrl String @db.VarChar(255)
  salon    Salon  @relation(fields: [salonId], references: [id])

  @@map("salon_image")
}

model ServiceImage {
  id        Int     @id @default(autoincrement())
  serviceId Int
  imageUrl  String  @db.VarChar(255)
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("service_image")
}

model UserSalon {
  userId  Int
  salonId Int
  user    User  @relation(fields: [userId], references: [id])
  salon   Salon @relation(fields: [salonId], references: [id])

  @@id([userId, salonId])
}

model SalonService {
  salonId   Int
  serviceId Int
  salon     Salon   @relation(fields: [salonId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([salonId, serviceId])
}
